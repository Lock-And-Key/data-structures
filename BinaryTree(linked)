//不知道哪里写错了，一直没得到正确的结果
#include<stdio.h>
#include<stdlib.h>
#define MAX_TREE_SIZE 100
#define TRUE 1
#define FALSE 0
#define OVERFLOW -2
typedef char TElemType;
typedef struct BiTNode
{
	TElemType data;
	struct BiTNode* lchild;
	struct BiTNode* rchild;
}BiTNode;
typedef BiTNode* BiTree;
void InitBiTree(BiTree *T);
void ClearBiTree(BiTree *T);
int CreateBiTree(BiTree *T);//先序 
int BiTreeDepth(BiTree T);
void LevelOrderTraverse(BiTree T,void(Visit)(TElemType));//层序 
void PreOrderTraverse(BiTree T,void(Visit)(TElemType));//先序 
void InOrderTraverse(BiTree T,void(Visit)(TElemType));//中序 
void Visit(TElemType elem);
int main(void)
{
	BiTree T;
	InitBiTree(&T);
	CreateBiTree(&T);
	printf("%d",BiTreeDepth(T));
	LevelOrderTraverse(T,Visit);
	ClearBiTree(&T);
	printf("%d",BiTreeDepth(T));
	return 0;
}
void Visit(TElemType elem)
{
	printf("%c",elem);
}
void InitBiTree(BiTree *T)
{
	*T=NULL;
}
void ClearBiTree(BiTree *T)
{
	if(*T)
	{
		if((*T)->lchild)
		   ClearBiTree(&(*T)->lchild);
		if((*T)->rchild)
		   ClearBiTree(&(*T)->rchild);
		free(*T);
		*T=NULL;
	}
}
int CreateBiTree(BiTree *T)
{
	TElemType ch;
	scanf("%c",&ch);
	if(ch==' ')
	  *T=NULL; 
	else
	{
		*T=(BiTree)malloc(sizeof(BiTNode));
		if(!(*T))
		   exit(OVERFLOW);
		(*T)->data=ch;
		CreateBiTree(&((*T)->lchild));
		CreateBiTree(&((*T)->rchild));
	}
	return TRUE;
}
int BiTreeDepth(BiTree T)
{
	int LDepth,RDepth;
	if(T==NULL)
	  return 0;
	else
	{
		LDepth=BiTreeDepth(T->lchild);
		RDepth=BiTreeDepth(T->rchild);
		return (LDepth>=RDepth?LDepth:RDepth)+1;
	}
}
void LevelOrderTraverse(BiTree T,void(Visit)(TElemType))
{
	int i,j;
	BiTree p[100];
	i=0,j=0;
	if(T)
	  p[j++]=T;
	while(i<j)
	{
		Visit(p[i]->data);
		if(p[i]->lchild)
		  p[j++]=p[i]->lchild;
		if(p[i]->rchild)
		  p[j++]=p[i]->rchild;
		i++;
	}
}
void PreOrderTraverse(BiTree T,void(Visit)(TElemType))
{
	if(T)
	{
		Visit(T->data);
		PreOrderTraverse(T->lchild,Visit);
		PreOrderTraverse(T->rchild,Visit);
	}
}
void InOrderTraverse(BiTree T,void(Visit)(TElemType))
{
	if(T)
	{
		PreOrderTraverse(T->lchild,Visit);
		Visit(T->data);
		PreOrderTraverse(T->rchild,Visit);
	}
}
