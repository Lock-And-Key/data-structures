#include<stdio.h>
#include<stdlib.h>
#define OVERFLOW -2
typedef int QElemType;
typedef struct QNode
{
	QElemType data;
	struct QNode *next;
 }QNode;
typedef QNode* QueuePtr;
typedef struct
{
	QueuePtr front;
	QueuePtr rear;
}LinkQueue;
int InitQueue(LinkQueue *Q);
void ClearQueue(LinkQueue *Q);
void DestroyQueue(LinkQueue *Q);
int QueueEmpty(LinkQueue Q);
int QueueLength(LinkQueue Q);
int EnQueue(LinkQueue *Q,QElemType e);
int DeQueue(LinkQueue *Q,QElemType *e);
void QueueTraverse(LinkQueue Q);
int main(void)
{
	int a,b,e;
	LinkQueue Q;
	InitQueue(&Q);
	for(a=0;a<5;a++)
	{
		scanf("%d",&b);
		EnQueue(&Q,b);
	}
	QueueTraverse(Q);
	DeQueue(&Q,&e);
	QueueTraverse(Q);
	printf("%d\n",QueueEmpty(Q));
}
int InitQueue(LinkQueue *Q)
{
	(*Q).front=((*Q).rear)=(QueuePtr)malloc(sizeof(QNode));
	if(!(*Q).front)
	  exit(OVERFLOW);
	(*Q).front->next=NULL;
	return 1;
}
void ClearQueue(LinkQueue *Q)
{
	(*Q).rear=(*Q).front->next;
	while((*Q).rear)
	{
		(*Q).front->next=(*Q).rear->next;
		free((*Q).rear);
		(*Q).rear=(*Q).front->next;
	}
	(*Q).rear=(*Q).front;
}
void DestroyQueue(LinkQueue *Q)
{
	while((*Q).front)
	{
		(*Q).rear=(*Q).front->next;
		free((*Q).front);
		(*Q).front=(*Q).rear;
	}
}
int QueueEmpty(LinkQueue Q)
{
	if(Q.front==Q.rear)
	   return 1;
	else
	   return 0;
}
int QueueLength(LinkQueue Q)
{
	int count=0;
	QueuePtr p=Q.front;
	while(p!=Q.rear)
	{
		count++;
		p=p->next;
	}
	return count;
}
int EnQueue(LinkQueue *Q,QElemType e)
{
	QueuePtr p;
	p=(QueuePtr)malloc(sizeof(QNode));
	if(!p)
	  exit(OVERFLOW);
	p->data=e;
	p->next=NULL;
	(*Q).rear->next=p;
	(*Q).rear=p;
	return 1;
}
int DeQueue(LinkQueue *Q,QElemType *e)
{
	QueuePtr p;
	if((*Q).front==(*Q).rear)
	   return 0;
	p=(*Q).front->next;
	*e=p->data;
	(*Q).front->next=p->next;
	if((*Q).rear==p)
	   (*Q).rear=(*Q).front;
	free(p);
	return 1;
}
void QueueTraverse(LinkQueue Q)
{
	QueuePtr p;
	p=Q.front->next;
	while(p)
	{
		printf("%d\n",p->data);
		p=p->next;
	}
}

