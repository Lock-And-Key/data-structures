//singly_linked_list 

//有些特殊情况没有管

#include<stdio.h>

#include<malloc.h>

typedef int status;

typedef int elemtype;

#define TURE 1

#define FALSE 0

typedef struct node

{

	elemtype data;

	struct node * next;

}node;

typedef node * LinkList;

status InitialList(LinkList * L);

status CreateList_1(LinkList L, int n);//头插法 

status CreateList_2(LinkList L, int n);//尾插法

void show_linklist(LinkList L, int n);

status ClearList(LinkList L);

void DestroyList_L(LinkList *L);

status ListEmpty_L(LinkList L);

int ListLength_L(LinkList L);

status GetElem_L(LinkList L, int i, int *e);

int LocateElem_L(LinkList L, int e);

status PriorElem_L(LinkList L, int cur_e, int *pre_e);//用pre_e接收cur_e的前驱。

status NextElem_L(LinkList L, int cur_e, int *next_e);

status ListInsert_L(LinkList L, int i, int e);//在单链表L第i个位置之前插入e.

status ListDelete_L(LinkList L, int i, int *e);//删除单链表L第i个位置的值，并用e接收

int Delete_Element(LinkList L, int e, int n);//delete all the elements which values 'e'

int main(void)

{
	int e,n, remain_node_num;
	LinkList L;
	InitialList(&L);
	printf("请输入结点的个数：");
	scanf_s("%d", &n);
	CreateList_1(L, n);
	show_linklist(L, n);
	printf("请输入要删除的结点：");
	scanf_s("%d", &e);
	remain_node_num=Delete_Element(L, e, n);
	show_linklist(L, remain_node_num);
	return 0;
}

status InitialList(LinkList * L)

{

	*L = (LinkList)malloc(sizeof(node));

	(*L)->next = NULL;
	return 1;
}

status CreateList_1(LinkList L, int n)//头插法 

{

	LinkList p;

	for (int i = 0;i < n;i++)

	{

		p = (LinkList)malloc(sizeof(node));

		printf("请输入第%d个节点:", i + 1);

		scanf_s("%d", &(p->data));

		p->next = L->next;

		L->next = p;

	}

	return TURE;

}

status CreateList_2(LinkList L, int n)//尾插法

{

	LinkList p, q;

	p = L;
	int i;
	q = (LinkList)malloc(sizeof(node));
	for (i = 0;i < n;i++)

	{

		q = (LinkList)malloc(sizeof(node));

		printf("请输入第%d个节点:", i + 1);

		scanf_s("%d", &q->data);

		p->next = q;

		p = q;

	}

	q->next = NULL;

	return TURE;

}

void show_linklist(LinkList L, int n)

{

	LinkList p = L->next;

	for (int i = 0;i < n;i++)

	{

		printf("%d\n", p->data);

		p = p->next;

	}

	printf("aha!\n");

}

status ClearList(LinkList L)

{

	if (!L)

		return FALSE;

	LinkList p = L->next, q;

	while (p)

	{

		q = p->next;

		free(p);

		p = q;

	}

	L->next = NULL;

	return TURE;

}

void DestroyList_L(LinkList *L)

{

	LinkList p = (*L), q;

	while (p)

	{

		q = p->next;

		free(p);

		p = q;

	}

}

status ListEmpty_L(LinkList L)

{

	if ((L != NULL) && (L->next == NULL))

		return TURE;



	else

		return FALSE;

}

int ListLength_L(LinkList L)

{

	LinkList p = L->next;

	int i = 0;

	while (p)

	{

		i++;

		p = p->next;

	}

	return i;

}

status GetElem_L(LinkList L, int i, int *e)

{

	LinkList p = L, q;

	while (i--)

	{

		q = p->next;

		p = q;

	}

	*e = p->data;
	return 1;
}

int LocateElem_L(LinkList L, int e)

{

	LinkList p = L->next;

	int i = 1;

	while (p)

	{

		if (p->data == e)

			break;

		p = p->next;

		i++;

	}

	if (p != NULL) return i;

	else return FALSE;

}

status PriorElem_L(LinkList L, int cur_e, int *pre_e)

{

	LinkList q = L, p = q->next;

	if (p->data == cur_e)

		return FALSE;

	while ((p != NULL) && (p->data != cur_e))

	{

		p = p->next;

		q = q->next;

	}

	if (p == NULL)

		return FALSE;

	*pre_e = q->data;
	return 1;
}

status NextElem_L(LinkList L, int cur_e, int *next_e)

{

	LinkList q = L->next, p = q->next;

	while ((p != NULL) && (q->data != cur_e))

	{

		q = q->next;

		p = p->next;

	}

	if (p == NULL)

		return FALSE;

	*next_e = p->data;

}

status ListInsert_L(LinkList L, int i, int e)//在单链表L第i个位置之前插入e.

{

	LinkList p = L, q;

	i--;

	while (i--)

	{

		p = p->next;

	}

	q = (LinkList)malloc(sizeof(node));

	q->data = e;

	q->next = p->next;

	p->next = q;

}

status ListDelete_L(LinkList L, int i, int *e)//删除单链表L第i个位置的值，并用e接收

{

	LinkList p = L, q;

	i--;

	while (i--)

	{

		p = p->next;

	}

	q = p->next;

	p->next = q->next;

	free(q);

	return TURE;

}

int Delete_Element(LinkList L, int e, int n)//delete all the elements which equals to 'e'



{

	int remain_node_num=n;

	LinkList p = L, q;



	while (--n)

	{

		q = p->next;

		if (q->data == e)

		{

			p->next = q->next;

			free(q);

			q = p->next;
			remain_node_num--;

		}

		else

		{

			p = q;

			q = q->next;

		}



	}
	return remain_node_num;
}
